services:
  mysql:
    image: mysql:8.0
    container_name: moa2zi-mysql
    ports:
      - "${MYSQL_PORT}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}   # MySQL root 비밀번호
      MYSQL_DATABASE: ${MYSQL_DATABASE}            # 초기 생성 데이터베이스 이름
      MYSQL_USER: ${MYSQL_USER}                    # 사용자 이름
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}            # 사용자 비밀번호
      TZ: ${TIMEZONE}                              # 컨테이너의 시간대 설정
    command:
      - --character-set-server=utf8mb4             # 문자 세트
      - --collation-server=utf8mb4_unicode_ci      # 문자 정렬 기준
    volumes:
      - mysql-data:/var/lib/mysql                  # 데이터 영구 저장 위치

  redis:
    image: redis:7.4.2-alpine
    container_name: moa2zi-redis
    ports:
      - "${REDIS_PORT}:6379"
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    volumes:
      - redis-data:/data                           # Redis 데이터 저장
      - ./redis.conf:/usr/local/etc/redis/redis.conf # 로컬 redis.conf 설정 매핑
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: moa2zi-zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: moa2zi-kafka
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_HOST}
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper


  mongodb:
    image: mongo:latest
    container_name: moa2zi-mongodb
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - /var/lib/mongo:/var/lib/mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}

volumes:
  mysql-data:                                      # MySQL 데이터 저장 볼륨
  redis-data:                                      # Redis 데이터 저장 볼륨
  mongo-data: